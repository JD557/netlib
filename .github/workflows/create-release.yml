# This workflow will create a release when a `v*` tag is pushed
# For more information see: https://github.com/actions/create-release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    # Map step output to job output
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url  }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Sonatype OSSRH
      uses: actions/setup-java@v1
      with: # running setup-java again overwrites the settings.xml
        java-version: 16
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
    - name: Publish to Sonatype OSSRH
      run: mvn --batch-mode deploy
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: true

  benchmarks:
    name: Run benchmarks
    runs-on: [self-hosted, linux, x64]
    needs: [build]
    strategy:
      matrix:
        jdk: [11, 16]
        include:
        - jdk: 11
          implementation: "f2j,java"
          jvmArgs: ""
        - jdk: 16
          implementation: "f2j,java,vector,native"
          jvmArgs: "--add-modules=jdk.incubator.vector,jdk.incubator.foreign -Dforeign.restricted=permit"
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.jdk }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.jdk }}
    - name: Build
      run: mvn --batch-mode package
    - name: Run benchmark
      run: java -jar benchmarks/target/netlib-benchmarks.jar -f 1 -wi 15 -i 3 -p implementation=${{ matrix.implementation }} -jvmArgs "${{ matrix.jvmArgs }}" -rf csv -rff jmh-results-jdk${{ matrix.jdk }}.csv | tee jmh-jdk${{ matrix.jdk }}.out
    - name: Upload JMH results
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build.outputs.release_upload_url }}
        asset_path: jmh-results-jdk${{ matrix.jdk }}.csv
        asset_name: jmh-results-jdk${{ matrix.jdk }}.csv
        asset_content_type: text/csv
    - name: Upload JMH output
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build.outputs.release_upload_url }}
        asset_path: jmh-jdk${{ matrix.jdk }}.out
        asset_name: jmh-jdk${{ matrix.jdk }}.out
        asset_content_type: text/plain
